definitions:
  jwt.NumericDate:
    properties:
      time.Time:
        type: string
    type: object
  todomodel.TodoItem:
    properties:
      status:
        type: string
      title:
        type: string
    type: object
  usermodel.JwtCustomClaims:
    properties:
      aud:
        description: the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3
        items:
          type: string
        type: array
      email:
        type: string
      exp:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4
      iat:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6
      iss:
        description: the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1
        type: string
      jti:
        description: the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7
        type: string
      nbf:
        allOf:
        - $ref: '#/definitions/jwt.NumericDate'
        description: the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5
      sub:
        description: the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2
        type: string
    type: object
  usermodel.LoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  usermodel.User:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:1323
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Todo app.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger API Todo app
  version: "1.0"
paths:
  /api/items:
    post:
      consumes:
      - application/json
      description: Add a todo item
      parameters:
      - description: Payload
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/todomodel.TodoItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todomodel.TodoItem'
      security:
      - JWT: []
      summary: Add a todo item
      tags:
      - items
  /api/items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWT: []
      summary: Delete a item
      tags:
      - items
    get:
      consumes:
      - application/json
      description: get by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todomodel.TodoItem'
      security:
      - JWT: []
      summary: Show a todo item
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payload
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/todomodel.TodoItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todomodel.TodoItem'
      security:
      - JWT: []
      summary: Update item
      tags:
      - items
  /api/users:
    post:
      consumes:
      - application/json
      description: Add an user
      parameters:
      - description: Payload
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/usermodel.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.User'
      security:
      - JWT: []
      summary: Add an user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - JWT: []
      summary: Delete an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.User'
      security:
      - JWT: []
      summary: Show an user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payload
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/usermodel.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.User'
      security:
      - JWT: []
      summary: Update an user
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: LoginPayload
        in: body
        name: LoginPayload
        required: true
        schema:
          $ref: '#/definitions/usermodel.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.JwtCustomClaims'
      summary: login
      tags:
      - auth
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
